#! /bin/sh
### BEGIN INIT INFO
# Provides:          varnish
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start varnish HTTP accelerator
# Description:       This script provides a server-side cache 
#                    to be run in front of a web server.
### END INIT INFO

# Author: Amedeo Salvati <amedeo.salvati@gmail.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="varnish HTTP accelerator"
NAME=varnish
DAEMON=
DAEMON_ARGS=""
#PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# varnishd exe
DAEMON=${VARNISHD}

# pidfile construct
PIDFILE=${VARNISH_PID}

# pidfile directory
VARNISH_PIDDIR=`dirname $VARNISH_PID `
if [ ! -d "$VARNISH_PIDDIR" ]; then
	echo "Error: Directory $VARNISH_PIDDIR doesn't exist! exit"
	exit 0
fi

# vcl  file
VCL_FILE=$VARNISH_VCL
if [ ! -r "$VCL_FILE" ]; then
	echo "Error: VCL file $VCL_FILE doesn't exist! exit"
	exit
fi

# port addr
PORT=$LISTEN_PORT
if [ ! "$PORT" != "" ]; then
	echo "Error: No LISTEN_PORT defined in '/etc/default/$NAME'. Exit"
	exit
fi

# secret file 
if [ ! "$SECRET" != "" ]; then
	echo "Error: No secret file supplied. Exit"
	exit
else
	if [ ! -r "$SECRET" ]; then
		echo "Error: Secret file $SECRET doesn't exist! exit"
		exit
	# TODO: verify len(secret) > 0
	fi
fi

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

cli_telnet() {
	# check parameters number
	if [ ! "$#" -eq 1 ]; then
		echo "Error when calling cli_telnet function. Exit"
		exit 1
	fi
	local varname=$1
	local var0=
	# TODO: Add more checks and options
	if [ "$TELNET_ADDR" != "" ]; then
		if [ "$TELNET_PORT" ]; then
			var0="-T $TELNET_ADDR:$TELNET_PORT"
		fi
	fi
	eval $varname='$(echo $var0)'
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	log_daemon_msg "Starting $NAME"

	# build args
	DAEMON_ARGS="-f $VARNISH_VCL -P $PIDFILE -S $SECRET"
	# /* TODO: Check ipv4 valid address */
	if [ "$LISTEN_ADDR" != "" ]; then
		DAEMON_ARGS="$DAEMON_ARGS -a $LISTEN_ADDR"
	else
		DAEMON_ARGS="$DAEMON_ARGS -a 0.0.0.0"
	fi
	DAEMON_ARGS="$DAEMON_ARGS:$PORT"
	if [ "$VARNISH_STORAGE" != "" ]; then
		DAEMON_ARGS="$DAEMON_ARGS -s $VARNISH_STORAGE"
	else
		DAEMON_ARGS="$DAEMON_ARGS -s malloc,32M"
	fi
	# telnet option
	cli_telnet CLI
	DAEMON_ARGS="$DAEMON_ARGS $CLI"
	# user
	if [ "$VARNISH_USER" != "" ]; then
		DAEMON_ARGS="$DAEMON_ARGS -u $VARNISH_USER"
	fi
	#echo $DAEMON_ARGS
	start-stop-daemon --start --quiet --exec $DAEMON -- $DAEMON_ARGS > /dev/null 2>&1
	RETVAL=$?
	#echo $RETVAL
	if [ $RETVAL -eq 0 ]; then
		log_end_msg 0
	elif [ $RETVAL -eq 1 ]; then
		echo -n "      "
		echo -n "Service $NAME is already running"
		log_end_msg 1
	else 
		log_end_msg 2
	fi
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
	#	|| return 1
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
	#	$DAEMON_ARGS \
	#	|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	# /* TODO: fix hardcoded name -> varnishd */
	log_daemon_msg "Stopping $NAME"
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name varnishd
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		log_end_msg 0
	elif [ $RETVAL -eq 1 ]; then
		echo -n "      "
		echo -n "Service $NAME is NOT running"
		log_end_msg 1
	else
		log_end_msg 2
		return 2
	fi
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	#[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return $RETVAL
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	cli_telnet CLI
	if [ "$CLI" != "" ]; then
		VARNISHADM=${VARNISH_HOME}/bin/varnishadm
		if [ -x $VARNISHADM ]; then
			if [ "$SECRET" != "" ]; then
				DAEMON_ARGS="$CLI -S $SECRET"
			else
				DAEMON_ARGS="$CLI"
			fi
			NOW=`date +%Y%m%d_%H%M%S_%N`
			$VARNISHADM $DAEMON_ARGS vcl.load reload_${NOW} $VCL_FILE > /dev/null 2>&1
			RETVAL=$?
			if [ ! $RETVAL -eq 0 ]; then
				return $RETVAL
			fi
			$VARNISHADM $DAEMON_ARGS vcl.use reload_${NOW} > /dev/null 2>&1
			RETVAL=$?
			if [ ! $RETVAL -eq 0 ]; then
				return $RETVAL
			fi
		fi
	fi
	return 0
}

do_status() {
	status_of_proc "$DAEMON" "$NAME"
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		cli_telnet CLI
		if [ "$CLI" != "" ]; then
			VARNISHADM=${VARNISH_HOME}/bin/varnishadm
			if [ -x $VARNISHADM ]; then
				echo ""
				if [ "$SECRET" != "" ]; then
					DAEMON_ARGS="$CLI -S $SECRET"
				else
					DAEMON_ARGS="$CLI"
				fi
				$VARNISHADM $DAEMON_ARGS stats
			fi
		fi
	else
		exit $RETVAL
	fi
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	   do_status
       ;;
  reload|force-reload)
	# TODO: implement reload
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
